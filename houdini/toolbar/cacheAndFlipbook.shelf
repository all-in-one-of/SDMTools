<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="com.sashaouellet::cacheandflipbook::1.0.0" label="Cache and Flipbook" icon="hicon:/SVGIcons.index?SOP_filecache.svg">
    <script scriptType="python"><![CDATA[import os, logging
import hou

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *
from PySide2.QtUiTools import QUiLoader

import sdm.houdini
from sdm.houdini.fileutils import getRelativeToHip
from sdm.houdini.node import getRopNode
from sdm.houdini.camera import flipbook, getCurrentViewport

class CacheAndFlipbookDialog(QDialog):
    def __init__(self, *args, **kwargs):
        super(CacheAndFlipbookDialog, self).__init__(*args, **kwargs)
    
        uiPath = os.path.join(sdm.houdini.folder, 'ui', 'SHELF_cacheAndFlipbook.ui')
    
        file = QFile(uiPath)
        file.open(QFile.ReadOnly)
    
        loader = QUiLoader()
        self.ui = loader.load(file)

        self.ui.LNE_flipOutput.setEnabled(False)
        self.ui.BTN_flipOutput.setEnabled(False)
        self.ui.CHK_useMplay.clicked.connect(self.handleMplayToggle)
        self.ui.BTN_ropNode.clicked.connect(self.handleRopSelection)
        self.ui.BTN_camNode.clicked.connect(self.handleCamSelection)
        self.ui.BTN_flipOutput.clicked.connect(self.handleFlipOutputSelection)
        self.ui.BTN_ok.clicked.connect(self.handleSubmit)
        self.ui.BTN_cancel.clicked.connect(self.ui.reject)
        
        self.isCooking = False
        
        selected = hou.selectedNodes()
        
        if selected and getRopNode(selected[-1]):
            self.ui.LNE_ropNode.setText(selected[-1].path())
            
        cams = sdm.houdini.camera.getCameras()
        
        if cams:
            self.ui.LNE_camNode.setText(cams[0].path())
         
        self.ui.setStyleSheet(hou.qt.styleSheet())
        self.ui.setWindowModality(Qt.NonModal)
        
    def handleMplayToggle(self):
        self.ui.LNE_flipOutput.setEnabled(not self.ui.CHK_useMplay.isChecked())
        self.ui.BTN_flipOutput.setEnabled(not self.ui.CHK_useMplay.isChecked())
        
    def handleRopSelection(self):
        initial = hou.node(self.ui.LNE_ropNode.text())
        node = hou.ui.selectNode(initial_node=initial)
        
        if node:
            self.ui.LNE_ropNode.setText(node)
        
    def handleCamSelection(self):
        initial = hou.node(self.ui.LNE_camNode.text())        
        node = hou.ui.selectNode(initial_node=initial, node_type_filter=hou.nodeTypeFilter.ObjCamera)
        
        if node:
            self.ui.LNE_camNode.setText(node)
        
    def handleFlipOutputSelection(self):
        output = hou.ui.selectFile(start_directory=hou.expandString('$HIP'), title='Select Flipbook Output', collapse_sequences=True, file_type=hou.fileType.Image, pattern=None, default_value=None, chooser_mode=hou.fileChooserMode.Write)
        
        if output:
            if '$F' not in output:
                hou.ui.displayMessage('Please specify a file path with sequence notation (i.e: $F, $F4)', title='Invalid Output', severity=hou.severityType.Error)
                self.handleFlipOutputSelection()
            
            self.ui.LNE_flipOutput.setText(getRelativeToHip(output))
            
    def doneCooking(self):
        return not self.isCooking
    
    def cookComplete(self):
        self.isCooking = False
        
    def handleSubmit(self):
        ropNode = hou.node(self.ui.LNE_ropNode.text())
        camNode = hou.node(self.ui.LNE_camNode.text())
        output = self.ui.LNE_flipOutput.text()
        useMplay = self.ui.CHK_useMplay.isChecked()
        rop = getRopNode(ropNode)
        
        logger.info('Executing cache and flipbook with rop: {} ({}), cam: {}, output: {}, using MPlay: {}'.format(ropNode, rop, camNode, output, useMplay))
        
        if not ropNode or not rop:
            hou.ui.displayMessage('Invalid ROP specified (must be a ROP node, or execute one)', title='Invalid ROP', severity=hou.severityType.Error)
            logger.warning('Invalid ROP: {} ({})'.format(ropNode.path(), rop.path()))
            return
            
        if not camNode or camNode.type().name() != 'cam':
            hou.ui.displayMessage('Invalid camera specified', title='Invalid Camera', severity=hou.severityType.Error)
            logger.warning('Node: {} is not a camera'.format(camNode.path()))
            return
        
        if not output and not useMplay:
            hou.ui.displayMessage('Please specify either an output path for the flipbook, or check "Mplay"', title='Invalid Flipbook Location', severity=hou.severityType.Error)
            logger.warning('No output specified when MPlay was unchecked')
            return
            
        if '$F' not in output and not useMplay:
            hou.ui.displayMessage('Please specify a file path with sequence notation (i.e: $F, $F4)', title='Invalid Output', severity=hou.severityType.Error)
            logger.warning('$F token not found in output')
            return
        
        logger.info('Executing cache..')
        
        if ropNode.type().name() == 'filecache':
            # Try to use custom button in case we have notifications
            button = ropNode.parm('executeWithNotification')
            
            if button:
                button.pressButton()
            else:
                rop.render()
        else: # Otherwise normal execution
            rop.render()
        
        logger.info('Cache completed')
        
        if ropNode.type().name() == 'filecache':
            ropNode.parm('loadfromdisk').set(1) # Set to load from disk
            ropNode.parm('reload').pressButton()
        else: # Must create file cache to load from
            outputParm = ropNode.globParms('sopoutput filename')[0]
            ropOut = outputParm.unexpandedString()
            fcache = ropNode.parent().createNode('filecache')
            output = getRelativeToHip(ropOut).replace('$OS', ropNode.name())
            
            logger.debug('Setting file path to: {}'.format(output))
            
            fcache.parm('file').set(output)
            fcache.parm('loadfromdisk').set(1)
            fcache.parm('reload').pressButton()
            fcache.setDisplayFlag(True)
            fcache.setRenderFlag(True)
            
            posOther = ropNode.position()
            offset = hou.Vector2(0, -1.5)
            
            fcache.setPosition(posOther + offset)
        
        if self.ui.CHK_moveCam.isChecked(): # Prepare to move camera
            logger.debug('Moving camera to bbox')
            
            hou.setFrame(ropNode.parm('f2').eval()) # set to last frame
            
            self.isCooking = True
            
            hou.ui.addEventLoopCallback(self.cookComplete)
            hou.ui.waitUntil(self.doneCooking) # Because jumping to the last frame causes a cook to occur (due to file readback)
            
            viewport = getCurrentViewport(hou.geometryViewportType.Perspective)
            
            viewport.setCamera(camNode) # Look through camera first otherwise it doesn't frame properly
            ropNode.setSelected(True)
            viewport.frameSelected()
            viewport.saveViewToCamera(camNode)
        
        flipOut = output if not useMplay else None
        
        logger.info('Flipbooking to: {}'.format(flipOut if flipOut else 'MPlay'))
        
        flipbook(camNode, output=flipOut)
        hou.ui.displayMessage('Complete!', title='Cache and Flipbook Completion')
        self.ui.close()

def main():
    dialog = CacheAndFlipbookDialog(parent=hou.qt.mainWindow())
    
    dialog.ui.show()
    
    hou.session.dummy = dialog.ui # Keeps the dialog open

logger = logging.getLogger('SHELF_cacheAndFlipbook')
main()]]></script>
  </tool>
</shelfDocument>
